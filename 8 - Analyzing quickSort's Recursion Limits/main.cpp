
#include <iostream>
#include <vector>
#include <cassert>
#include "FHvector.h"
#include "FHsort.h"
#include "../Utilities/CSVWriter.h"
using namespace std;


template <class Comparable>
void quickSortX(FHvector<Comparable>& vectorIn,
                const int left, const int right,
                const int recLimit)
{
   const int sectionSize = right - left;
   if (sectionSize >= recLimit and recLimit >= 2) {
      const Comparable pivot = median3(vectorIn, left, right);
      int i = left;
      int j = right - 1;
      
      while(true) {
         while(vectorIn[++i] < pivot);
         while(pivot < vectorIn[--j]);
         if (i < j) mySwapFH(vectorIn[i], vectorIn[j]); else break;
      }
      
      mySwapFH(vectorIn[i], vectorIn[right-1]);
      quickSortX(vectorIn, left, i-1,   recLimit);
      quickSortX(vectorIn, i+1,  right, recLimit);
   } else {
      insertionSort(vectorIn, left, right);
   }
}


template <class Comparable>
void quickSortX(FHvector<Comparable>& vectorIn, const int recLimit) {
   assert(recLimit > 1 and vectorIn.size() > 1);
   quickSortX(vectorIn, 0, vectorIn.size()-1, recLimit);
}


void randPopulate(FHvector<int>& fhVector) {
   srand(static_cast<unsigned int>(time(NULL)));
   const size_t vectorSize = fhVector.size();
   for (int i = 0 ; i < vectorSize ; ++i) {
      fhVector[i] = rand() % vectorSize;
   }
}


const vector<FHvector<int>> generateTestVectors(const int minSize,
                                                const int maxSize,
                                                const int numVectors)
{
   assert(maxSize > minSize and numVectors > 0);
   
   srand(static_cast<unsigned int>(time(NULL)));
   vector<FHvector<int>> testVectors;
   
   int increment = (maxSize - minSize) / (numVectors-1);
   for (int vectorSize =  minSize ;
        vectorSize <= maxSize ;
        vectorSize += increment)
   {
      FHvector<int> fhVector(vectorSize);
      randPopulate(fhVector);
      testVectors.push_back(fhVector);
   }
   return testVectors;
}


template <class HasSize>
void printHeading(const vector<HasSize>& testVectors) {
   printf("%-8s", "recLim");
   for (const HasSize& testVect : testVectors)
      printf("%-10d", testVect.size());
   cout << endl;
}


template <class Sortable>
const double testQSX(Sortable testVector, const int recLim) {
      // recieves testVector by value to retain randomness
   const clock_t start = clock();
   quickSortX(testVector, recLim);
   const double elapsedTime = (double) (clock() - start) /
   (double) CLOCKS_PER_SEC;
   return elapsedTime;
}


#define MIN_VECTORSIZE  40000
#define MAX_VECTORSIZE 400000
#define NUM_VECTORS         5

#define MIN_RECLIMIT   2
#define MAX_RECLIMIT 300
#define LIM_INCREMENT  2


int main() {
   vector<FHvector<int>> testVectors =
   generateTestVectors(MIN_VECTORSIZE, MAX_VECTORSIZE, NUM_VECTORS);
   
   printHeading(testVectors);
   CSVWriter myWriter("/Users/justin/Desktop/testcsv.csv");
   
   for (int recLim  = MIN_RECLIMIT ;
        recLim <= MAX_RECLIMIT ;
        recLim += LIM_INCREMENT)
   {
      printf("%-8d", recLim); myWriter.write(recLim, false);
      
      for (const FHvector<int>& testVector : testVectors) {
         double elapsedTime = testQSX(testVector, recLim);
         printf("%-10f", elapsedTime); myWriter.write(elapsedTime);
      }
      
      cout << endl; myWriter.nextRow();
   }
   
   return 0;
}


/******************************
 *
 * DISCUSSION & SAMPLE OUTPUT
 *
 ******************************
 
 
 sort times appear to reach a stable minimum for recursion limits
 between approximately 8 and 26, and increase linearly with
 distance from this range; these effects are much more pronounced
 as input sizes increase (largest tested input was a FHvector of 400,000 ints).
 
 Average sort times in minimum range were:
 n = 400,000 : 0.11 sec
 n = 310,000 : 0.08 sec
 n = 220,000 : 0.05 sec
 n = 130,000 : 0.03 sec
 n =  40,000 : 0.01 sec
 
 
 recLim  40000     130000    220000    310000    400000
 2       0.009146  0.031289  0.056482  0.079871  0.097213
 4       0.008163  0.031166  0.056452  0.081244  0.105880
 6       0.009481  0.031409  0.053902  0.080759  0.105487
 8       0.008322  0.034063  0.057652  0.078432  0.105757
 10      0.009167  0.033310  0.056577  0.080193  0.104396
 12      0.008237  0.033133  0.057754  0.081145  0.105084
 14      0.008511  0.032245  0.060316  0.086580  0.103283
 16      0.008961  0.029870  0.054530  0.080054  0.105410
 18      0.008651  0.031590  0.057306  0.085764  0.107408
 20      0.008768  0.031433  0.056028  0.083851  0.110482
 22      0.008668  0.032426  0.057771  0.086167  0.113834
 24      0.009213  0.033855  0.057268  0.083636  0.115792
 26      0.009283  0.032154  0.060521  0.085256  0.113779
 28      0.010732  0.033319  0.063170  0.085753  0.126227
 30      0.010190  0.033361  0.060231  0.090386  0.112254
 32      0.009402  0.033210  0.061541  0.090437  0.125921
 34      0.009926  0.037365  0.060450  0.089601  0.116014
 36      0.010087  0.034983  0.062793  0.087446  0.126858
 38      0.012101  0.036763  0.062977  0.091041  0.118655
 40      0.009875  0.035394  0.062339  0.091808  0.118911
 42      0.010157  0.038342  0.066325  0.091301  0.120219
 44      0.010360  0.036788  0.065338  0.091816  0.130477
 46      0.009940  0.033261  0.064378  0.088269  0.124636
 48      0.010463  0.036967  0.070714  0.094813  0.124967
 50      0.010709  0.038745  0.067152  0.095875  0.127175
 52      0.011352  0.038319  0.070060  0.099121  0.136617
 54      0.010871  0.039412  0.072192  0.100697  0.127796
 56      0.011062  0.038626  0.070706  0.101580  0.134692
 58      0.011209  0.039536  0.069858  0.105131  0.144326
 60      0.012929  0.039390  0.072002  0.110687  0.127848
 62      0.011324  0.042809  0.077050  0.107189  0.139294
 64      0.011259  0.046425  0.080305  0.114475  0.135869
 66      0.012362  0.043141  0.074832  0.104946  0.141549
 68      0.012346  0.044642  0.078867  0.109488  0.141573
 70      0.012244  0.043288  0.072385  0.106803  0.152783
 72      0.014124  0.047933  0.083147  0.117711  0.150749
 74      0.013187  0.046148  0.078337  0.104042  0.132923
 76      0.012811  0.043072  0.075418  0.103868  0.139056
 78      0.012020  0.041973  0.075083  0.108505  0.149206
 80      0.012854  0.047570  0.083607  0.116598  0.154802
 82      0.013082  0.047655  0.082279  0.119826  0.153813
 84      0.012892  0.047235  0.081160  0.121910  0.155144
 86      0.013702  0.049648  0.085801  0.120555  0.159754
 88      0.013402  0.047554  0.083124  0.121714  0.164514
 90      0.013674  0.048397  0.087148  0.122421  0.163149
 92      0.014378  0.055943  0.093397  0.125409  0.160625
 94      0.015233  0.050357  0.089054  0.126640  0.160419
 96      0.015258  0.050577  0.088281  0.127356  0.171444
 98      0.015538  0.051640  0.098601  0.139294  0.167989
 100     0.014336  0.051039  0.089091  0.129814  0.167921
 102     0.014465  0.052189  0.094497  0.128364  0.174624
 104     0.014795  0.054620  0.087758  0.131348  0.171300
 106     0.014486  0.053689  0.096075  0.131257  0.173669
 108     0.014910  0.052559  0.087932  0.120033  0.157770
 110     0.013947  0.050512  0.091746  0.134812  0.170754
 112     0.014242  0.054321  0.089046  0.133000  0.186995
 114     0.015565  0.055132  0.096107  0.139628  0.187234
 116     0.014929  0.053939  0.086475  0.137311  0.177644
 118     0.014716  0.056368  0.088224  0.136012  0.196194
 120     0.017748  0.056097  0.101576  0.147753  0.181994
 122     0.015119  0.057550  0.097403  0.153858  0.184037
 124     0.016645  0.057807  0.106556  0.156600  0.186029
 126     0.018661  0.057734  0.109818  0.146861  0.186540
 128     0.017181  0.060372  0.102661  0.151736  0.202478
 130     0.018313  0.057822  0.102029  0.150467  0.187739
 132     0.016197  0.058584  0.103370  0.163872  0.197612
 134     0.019360  0.061214  0.104636  0.148940  0.182517
 136     0.016346  0.058660  0.113389  0.149981  0.199739
 138     0.018646  0.062014  0.108377  0.154465  0.204734
 140     0.018222  0.062504  0.111502  0.156732  0.210586
 142     0.018583  0.064261  0.111127  0.155325  0.205611
 144     0.018809  0.063036  0.114588  0.151348  0.193120
 146     0.018192  0.060399  0.103536  0.156453  0.214251
 148     0.021498  0.064555  0.111148  0.159636  0.211659
 150     0.020714  0.063736  0.113624  0.166867  0.212902
 152     0.020697  0.070417  0.115146  0.161174  0.216619
 154     0.020014  0.066051  0.116850  0.164100  0.219059
 156     0.019489  0.066165  0.119306  0.156792  0.218665
 158     0.021985  0.071031  0.121989  0.172707  0.201117
 160     0.019697  0.061223  0.108063  0.170950  0.211897
 162     0.019141  0.065532  0.111993  0.158568  0.201297
 164     0.020167  0.062322  0.117225  0.157701  0.198633
 166     0.020386  0.063653  0.108218  0.159288  0.207750
 168     0.019698  0.067838  0.115830  0.163266  0.220217
 170     0.019935  0.063537  0.119880  0.164021  0.208603
 172     0.020102  0.064011  0.117992  0.164182  0.213287
 174     0.020030  0.065035  0.122040  0.168101  0.216705
 176     0.019975  0.065003  0.126472  0.168486  0.224700
 178     0.019485  0.066752  0.120708  0.165439  0.214324
 180     0.020134  0.066693  0.117234  0.178870  0.222496
 182     0.020468  0.073218  0.119112  0.176207  0.231881
 184     0.022388  0.066951  0.119104  0.171032  0.223761
 186     0.020141  0.067444  0.122064  0.173004  0.234009
 188     0.020986  0.070052  0.126242  0.170851  0.231858
 190     0.020304  0.068867  0.128189  0.186964  0.252351
 192     0.022066  0.080249  0.138752  0.187910  0.228778
 194     0.020491  0.073840  0.140082  0.197431  0.246211
 196     0.020957  0.070031  0.128184  0.197064  0.253156
 198     0.024159  0.073178  0.129216  0.196807  0.253353
 200     0.021469  0.083915  0.133559  0.181746  0.245101
 202     0.025679  0.083768  0.149187  0.203733  0.259378
 204     0.021280  0.072862  0.130847  0.183255  0.265447
 206     0.023586  0.074455  0.129335  0.196038  0.253823
 208     0.021519  0.072924  0.129145  0.187510  0.253385
 210     0.026056  0.073213  0.131313  0.193058  0.248285
 212     0.026164  0.081607  0.130528  0.201625  0.265702
 214     0.024690  0.087901  0.150391  0.213422  0.265295
 216     0.022356  0.083421  0.136833  0.209409  0.257326
 218     0.028073  0.089044  0.148552  0.214591  0.270633
 220     0.027164  0.087375  0.137108  0.201410  0.251044
 222     0.028402  0.100683  0.164661  0.206983  0.278834
 224     0.026381  0.091149  0.136251  0.197775  0.268690
 226     0.025639  0.091858  0.154291  0.211017  0.265839
 228     0.023970  0.084385  0.142125  0.218018  0.262887
 230     0.024827  0.088888  0.153026  0.215904  0.271534
 232     0.023752  0.080079  0.143371  0.224093  0.303847
 234     0.031954  0.098550  0.137988  0.209750  0.294228
 236     0.027263  0.092967  0.155659  0.224493  0.269207
 238     0.028310  0.090821  0.159143  0.225812  0.295808
 240     0.025225  0.096045  0.152239  0.223448  0.303696
 242     0.027672  0.094596  0.171129  0.224856  0.284752
 244     0.025677  0.100041  0.164620  0.237300  0.296348
 246     0.028347  0.095370  0.164485  0.238248  0.297301
 248     0.028354  0.094932  0.177313  0.223136  0.295971
 250     0.027652  0.093095  0.166122  0.248866  0.324243
 252     0.030344  0.103307  0.178241  0.233001  0.277451
 254     0.026501  0.099026  0.172535  0.235165  0.308487
 256     0.027825  0.098616  0.166973  0.240201  0.297450
 258     0.030138  0.098990  0.171675  0.237126  0.317041
 260     0.028824  0.096913  0.170769  0.242745  0.314538
 262     0.029204  0.096816  0.168767  0.244303  0.313813
 264     0.029016  0.096487  0.172697  0.243118  0.315198
 266     0.029904  0.099077  0.176466  0.245652  0.315975
 268     0.034188  0.103420  0.175183  0.249819  0.327365
 270     0.030517  0.100581  0.170634  0.238947  0.295531
 272     0.029695  0.092730  0.173101  0.250283  0.323559
 274     0.034185  0.111983  0.191987  0.264509  0.339666
 276     0.033493  0.110597  0.191744  0.262665  0.326122
 278     0.031696  0.097592  0.188571  0.248394  0.320580
 280     0.029977  0.100738  0.179841  0.247130  0.315377
 282     0.027827  0.101118  0.167068  0.250672  0.320082
 284     0.031469  0.110744  0.196642  0.256624  0.333080
 286     0.030156  0.101118  0.173882  0.236664  0.323741
 288     0.028655  0.096877  0.186092  0.266671  0.322204
 290     0.031028  0.109401  0.194432  0.250059  0.338431
 292     0.032350  0.112256  0.195098  0.289559  0.341099
 294     0.031701  0.106003  0.198344  0.267402  0.325887
 296     0.030041  0.114212  0.197856  0.254439  0.361572
 298     0.034457  0.106388  0.202201  0.272634  0.354280
 300     0.035368  0.114162  0.200099  0.284072  0.375469
 Program ended with exit code: 0
 
 */
